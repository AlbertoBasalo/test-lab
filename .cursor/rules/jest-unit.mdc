---
description: 
globs: "**/*.test.ts"
alwaysApply: false
---
# Jest Unit Testing Guidelines

## Test Structure
- Use `describe` blocks to group related tests
- Use `it` blocks for individual test cases
- Use `beforeAll` and `beforeEach` for setup
- Use descriptive test names that explain the expected behavior
- Follow AAA pattern (Arrange, Act, Assert) in test cases

## Naming
- Use the most realistics variable names for input and output data.
- Do not use variables for asertions, prefer real data.
- Suffix doubles with `Stub`, `Spy` or `Fake`.

## Doubles for Dependencies
- Create fake implementations for dependencies when:
  - Unreliable (not tested or not deterministic)
  - Slow (compute or out of process)
- Use `jest.fn()` for creating mock functions
- Use `jest.spyOn()` for spying on existing methods
- Store original implementations in variables for restoration
- Clear mocks between tests using `jest.clearAllMocks()`

## Assertions
- Use specific assertions that match the test case
- Verify both return values and side effects
- Check mock function calls when relevant
- Prefer only one assertion per test case
```typescript
expect(message).toBe('hello');
expect(methodSpy).toHaveBeenCalledTimes(1);
```

## Best Practices
- Keep tests focused and isolated
- Document complex test setups
- Clean up after tests





