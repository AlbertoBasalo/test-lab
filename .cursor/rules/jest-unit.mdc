---
description: 
globs: "**/*.test.ts"
alwaysApply: false
---
# Jest Unit Testing Guidelines

## Test Structure
- Use `describe` blocks to group related tests
- Use `it` blocks for individual test cases
- Use `beforeAll` and `beforeEach` for setup
- Use descriptive test names that explain the expected behavior
- Follow AAA pattern (Arrange, Act, Assert) in test cases

## Naming
- Prefix data variables with `input`, `actual` or `expected`.
- Suffix doubles and suts with `Sut`, `Stub`, `Spy` or `Fake`.


## Mocking and Stubbing
- Use `jest.fn()` for creating mock functions
- Use `jest.spyOn()` for spying on existing methods
- Store original implementations in variables for restoration
- Clear mocks between tests using `jest.clearAllMocks()`


## Mocking External Dependencies
- Create fake implementations for dependencies when:
  - Not reliable
  - Slow
  - Cost

## Assertions
- Use specific assertions that match the test case
- Verify both return values and side effects
- Check mock function calls when relevant
```typescript
expect(actualResult).toBe(expectedResult);
expect(methodSpy).toHaveBeenCalledTimes(1);
```

## Async Testing
- Use `async/await` for asynchronous tests
- Handle promises properly in assertions
- Mock async functions with `mockResolvedValue` or `mockRejectedValue`

## Best Practices
- Keep tests focused and isolated
- Use meaningful variable names (`inputValueName`, `actulResultName`, `expectedResultName`, `methodNameStub`. `methodNameSpy`, `dependencyNameFake`, )
- Document complex test setups
- Clean up after tests
- Use type assertions sparingly and only for testing purposes




